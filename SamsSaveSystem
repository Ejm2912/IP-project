// # MIT License
//### Copyright (c) <2025> <Samantha Scott, Erle Fernandes, Gaven McNamara ( hope
// I spelled your name right>

// Okay let me explain what's going on here for everyone (and get it straight for myself
// because I had to look up most of this and I have no idea what kind of monster I just created)

// java.io.* and java.util.* will allow things
// like scanner, list objects, FileReader. etc
//
import java.io.*;
import java.util.*;


// alright here is my attempt to explain this. Note WheelOfFortuneSave.dat was created
// in my program here and is need for the save to work since, since it
// is a blank .dat file. Dat is designed to specifically refer to the program that created it.

public class WheelOfFortuneWithSave {
    // scanner is used for things such as chara and save late. It's very important
    // gameData and allowedGuesses are just the creation of the variables that
    // will be used later
    private static final Scanner in = new Scanner(System.in);
    private static GameData gameData;
    private static int allowedGuesses;

    // So let me explain Serializable. Serialization is the process of
    // converting an object into a byte stream,
    // which can then be reverted back into a copy of the object. Basically it makes it
    // so the data can be copied as a save and loaded. @Serial is a suggestion by the
    // IDE, so I don't know what to tell you. private static final long serialVersionUID = 1L;
    // ensures that the class can copied into a save file. serialVersionUID implements Serializable
    // in the class. It needs a long because google told me so and the most common one is 1L
    // so that's what I used. Oh and everything else is an initiated variable
    static class GameData implements Serializable {
        @Serial
        private static final long serialVersionUID = 1L;
        String test;
        String hiddenTest;
        int score;
        int allowedGuesses;

        // Lovely little blank constructor
        public GameData(String test, String hiddenTest, int score, int allowedGuesses) {
            this.test = test;
            this.hiddenTest = hiddenTest;
            this.score = score;
            this.allowedGuesses = allowedGuesses;
        }
    }
    // main first of all ignores any IOException so the program can run.
    // Then it simply displays everything important such as classes and
    // variables.
    public static void main(String[] args) throws IOException {
        displayAsciiArt();

        if (loadGame()) {
            System.out.println("Loaded saved game!");
            System.out.println("Phrase: " + gameData.hiddenTest);
            System.out.println("You have " + gameData.allowedGuesses + " guesses.");
        } else {
            System.out.println("Starting a new game!");
            gameData = new GameData("", "", 0, 0);
            selectDifficulty();
            CatsAndPhrases();
        }

        resumeGameplay();
    }
  // This mess only works as Arrays.asList I don't know man. It does put
    // everything in a list as needed though
    public static void CatsAndPhrases() {
        Random random = new Random();

        // Category List
        List<String[]> categories = Arrays.asList(
                new String[]{"Around The House", "Cozy Fireplace Mantel",
                        "Stack Of Fluffy Towels",
                        "Decorative Throw Pillows", "Squeaky Rocking Chair"},
                new String[]{"Food and Drink",
                        "Ice-Cold Lemonade",
                        "Crispy Chicken Tenders",
                        "Freshly Baked Apple Pie", "Spaghetti With Meatballs"},
                new String[]{"Before and After",
                        "Golden Retriever Puppy Love",
                        "Apple Pie Chart", "Rock Climbing Gym Membership",
                        "Chocolate Bar Exam"},
                new String[]{"In The Kitchen",
                        "Stainless Steel Toaster",
                        "Nonstick Frying Pan",
                        "Measuring Cups And Spoons", "Spice Rack Organizer"},
                new String[]{"Best Seller(s)",
                        "The Great Gatsby",
                        "New York Times Bestseller List",
                        "To Kill A Mockingbird", "The Catcher In The Rye"},
                new String[]{"Character(s)",
                        "The Three Musketeers",
                        "Sherlock Holmes And Dr. Watson",
                        "Romeo And Juliet", "The Hardy Boys"},
                new String[]{"Fictional Character(s)",
                        "Harry Potter And The Sorcererâ€™s Stone",
                        "Winnie The Pooh", "SpongeBob SquarePants", "Katniss Everdeen"},
                new String[]{"Event(s)",
                        "High School Graduation",
                        "Surprise Birthday Party",
                        "Thanksgiving Day Parade", "New Year's Eve Celebration"},
                new String[]{"Movie Quotes",
                        "May the Force be with you. Star Wars",
                        "I'll be back. The Terminator",
                        "You can't handle the truth! A Few Good Men",
                        "There's no place like home. The Wizard of Oz"}
        );
        // this allows for categories to be random. .size gets the number of
        // list items and random does the obvious. than the first element,
        // or category of a random string in the list is displayed.
        // test then equals a random part of the selectedCategory. The plus
        // one makes sure the category will not be selected again.
        String[] selectedCategory = categories.get(random.nextInt(categories.size()));
        System.out.println("Category: " + selectedCategory[0]);
        gameData.test = selectedCategory[random.nextInt(4) + 1];

        // pretty much same as before
        gameData.hiddenTest = gameData.test.replaceAll("[a-zA-Z]", "_");
        System.out.println("\nHere is your phrase:");
        System.out.println(gameData.hiddenTest);
    }
   // aside from ignoring the IOE. It's pretty much the same as before
    private static void resumeGameplay() throws IOException {
        boolean guess = true;
        boolean[] guessedChars = new boolean[gameData.test.length()];

        for (int i = 0; i < gameData.test.length(); i++) {
            if (gameData.hiddenTest.charAt(i) != '_') {
                guessedChars[i] = true;
            }
        }
       // same code as before
        while (guess) {
            System.out.println("Guess a letter:");
            char chara = in.nextLine().charAt(0);

            if (gameData.test.contains(Character.toString(chara))) {
                for (int i = 0; i < gameData.test.length(); i++) {
                    if (gameData.test.charAt(i) == chara) {
                        guessedChars[i] = true;
                    }
                }
            }

            StringBuilder currentGuess = new StringBuilder();
            for (int i = 0; i < gameData.test.length(); i++) {
                if (guessedChars[i]) {
                    currentGuess.append(gameData.test.charAt(i));
                } else {
                    currentGuess.append('_');
                }
            }

            gameData.hiddenTest = currentGuess.toString();
            System.out.println(gameData.hiddenTest);

            if (!gameData.test.contains(Character.toString(chara))) {
                System.out.println("Wrong guess! Spin again!");
            }

            // allows for save
            System.out.println("Do you want to save the game? (Type yes or no)");
            String saveInput = in.nextLine();
            if (Objects.equals(saveInput, "yes")) {
                saveGame();
                System.out.println("Game saved successfully!");
            }

            System.out.println("Do you want to solve the phrase? (Type yes or no)");
            String line = in.nextLine();

            // implements allowedGuesses from Gavin, which I altared a little bit to
            // work with the mess. I once again had to use google. BTW I have no
            // clue if any of this is optimized.
            if (Objects.equals(line, "yes")) {
                guess = false;
                System.out.println("You have " + gameData.allowedGuesses + " guesses. If you get them wrong, you lose!");

                // simple for loop that uses user input and uses close and rest game
                // returns nothing because nothing is needed.
                for (int i = gameData.allowedGuesses; i > 0; i--) {
                    line = in.nextLine();
                    if (Objects.equals(line, gameData.test)) {
                        System.out.println("You just won Wheel of Fortune! Congratulations!");
                        closeGame();
                        resetGame();
                        return;
                    } else {
                        System.out.println("You have " + (i - 1) + " guesses remaining.");
                    }
                }
                System.out.println("You lose! The correct phrase was: " + gameData.test);
                closeGame();
                resetGame();
            }
        }
    }

    // difficulty interface. this uses a switch statement that is attached
    // to numbers that follow user input. Default forces the input to be 3
    // this than forces hard. Amount of guesses are printed.

    public static void selectDifficulty() {
        System.out.println("\nSelect Difficulty: (easy, hard, impossible)");
        String difficulty = in.nextLine().toLowerCase();
        gameData.allowedGuesses = switch (difficulty) {
            case "easy" -> 5;
            case "hard" -> 3;
            case "impossible" -> 1;
            default -> {
                System.out.println("Invalid difficulty, defaulting to hard mode.");
                yield 3;
            }
        };
        System.out.println("You have " + gameData.allowedGuesses + " guesses.");
    }
    // resetGame does what you expect. it asks if a user wants a new game.
    // If yes everything is reset to a default and run again. If not, program
    // terminates.
    private static void resetGame() throws IOException {
        System.out.println("Do you want to start a new game? (Type yes or no)");
        String response = in.nextLine();
        if (Objects.equals(response, "yes")) {
            gameData = new GameData("", "", 0, 0);
            selectDifficulty();
            CatsAndPhrases();
            resumeGameplay();
        } else {
            System.out.println("Thanks for playing! Goodbye!");
            System.exit(0);
        }
    }

    // does what you think. Could be used for your new ascii Erle?
    // We need to think of how to combine our code.
    public static void displayAsciiArt() {
        System.out.println("""
                 __        ___   _ _____ _____ _        ___  _____
                \\ \\      / / | | | ____| ____| |      / _ \\|  ___|
                 \\ \\ /\\ / /| |_| |  _| |  _| | |     | | | | |_
                  \\ V  V / |  _  | |___| |___| |___  | |_| |  _|
                 __\\_/\\_/_ |_|_|_|_____|_____|_____|__\\___/|_|
                """);
    }
   // self-explanatory.
    public static void closeGame() {
        System.out.println("Game Over! Thank you for playing Wheel of Fortune!");
    }
    // The two most important classes. okay so saveGame. It writes the current into
    // the .dat file. It creates an objectoutputstream which is part of
    // serialization. It encodes Java objects into a stream,
    // which can then be written to files or transmitted over networks. oos simply means
    // that code in being serialized and written to the file. Which is what happens
    // a fileoutputstream is created and the code is written to our .dat file.
    // finally the writeObject method serializes the gameData class. Basically it says
    // try all the nonsense above on gameData.
    private static void saveGame() throws IOException {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("WheelOfFortuneSave.dat"))) {
            oos.writeObject(gameData);
        }
    }
   // Same thing but with input, also ois represents input. A ture false is
    // implemented in case no save file in the class is found. ois.readObject puts the
    // data back as it was!! That's everything as best as I understand it. If
    // you have any questions please ask =D.
    private static boolean loadGame() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("WheelOfFortuneSave.dat"))) {
            gameData = (GameData) ois.readObject();
            return true;
        } catch (IOException | ClassNotFoundException e) {
            return false;
        }
    }
}
